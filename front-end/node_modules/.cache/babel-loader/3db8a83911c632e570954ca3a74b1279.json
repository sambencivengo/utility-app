{"ast":null,"code":"var _jsxFileName = \"/Users/sambencivengo/Coding/test-project/utility-app/src/components/TaskContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TaskCard from './TaskCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskContainer = () => {\n  _s();\n\n  const url = 'http://localhost:4000/tasks';\n  const [taskList, setTaskList] = useState([]);\n  const [task, setTask] = useState({});\n  const [complete, setComplete] = useState(false);\n\n  const handleFormInput = e => {\n    console.log(`Key = ${e.target.name} : Value = ${e.target.value}`);\n    setTask({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  console.log(task); // POSTING NEW TASK\n\n  const postFunction = () => {\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(task)\n    }).then(r => r.json()).then(newTask => {\n      console.log(newTask);\n      setTaskList([...taskList, newTask]);\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    postFunction();\n    e.target.reset();\n  }; // FETCHING INITIAL TASKLIST\n\n\n  useEffect(() => {\n    fetch(url).then(r => r.json()).then(data => {\n      setTaskList(data);\n      console.log('From useEffect: ', data);\n    });\n  }, []); // COMPLETE TASK\n\n  const handleComplete = completedTask => {\n    console.log(completedTask);\n    this.setComplete(!complete);\n  }; // DELETE TASK\n\n\n  const handleDelete = doomedTask => {\n    fetch(url + '/' + doomedTask.id, {\n      method: 'DELETE'\n    }).then(() => {\n      const filteredTasks = taskList.filter(task => task.id !== doomedTask.id);\n      setTaskList(filteredTasks);\n    });\n    console.log(doomedTask);\n  };\n\n  const renderedTasks = taskList.map(task => {\n    return /*#__PURE__*/_jsxDEV(TaskCard, {\n      handleComplete: handleComplete,\n      complete: complete,\n      task: task\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-container\",\n    children: [renderedTasks, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"What do you need to do?\",\n        name: \"task_item\",\n        onChange: handleFormInput,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TaskContainer, \"h5rNCEv+FlKxwZn3er9AQeAAy50=\");\n\n_c = TaskContainer;\nexport default TaskContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskContainer\");","map":{"version":3,"sources":["/Users/sambencivengo/Coding/test-project/utility-app/src/components/TaskContainer.js"],"names":["useEffect","useState","Button","TaskCard","TaskContainer","url","taskList","setTaskList","task","setTask","complete","setComplete","handleFormInput","e","console","log","target","name","value","postFunction","fetch","method","headers","Accept","body","JSON","stringify","then","r","json","newTask","handleSubmit","preventDefault","reset","data","handleComplete","completedTask","handleDelete","doomedTask","id","filteredTasks","filter","renderedTasks","map"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TaskCard from './TaskCard';\n\nconst TaskContainer = () => {\n\tconst url = 'http://localhost:4000/tasks';\n\tconst [taskList, setTaskList] = useState([]);\n\tconst [task, setTask] = useState({});\n\tconst [complete, setComplete] = useState(false);\n\tconst handleFormInput = (e) => {\n\t\tconsole.log(`Key = ${e.target.name} : Value = ${e.target.value}`);\n\t\tsetTask({ [e.target.name]: e.target.value });\n\t};\n\n\tconsole.log(task);\n\t// POSTING NEW TASK\n\tconst postFunction = () => {\n\t\tfetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(task),\n\t\t})\n\t\t\t.then((r) => r.json())\n\n\t\t\t.then((newTask) => {\n\t\t\t\tconsole.log(newTask);\n\t\t\t\tsetTaskList([...taskList, newTask]);\n\t\t\t});\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tpostFunction();\n\t\te.target.reset();\n\t};\n\n\t// FETCHING INITIAL TASKLIST\n\tuseEffect(() => {\n\t\tfetch(url)\n\t\t\t.then((r) => r.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetTaskList(data);\n\t\t\t\tconsole.log('From useEffect: ', data);\n\t\t\t});\n\t}, []);\n\n\t// COMPLETE TASK\n\tconst handleComplete = (completedTask) => {\n\t\tconsole.log(completedTask);\n\n\t\tthis.setComplete(!complete);\n\t};\n\t// DELETE TASK\n\tconst handleDelete = (doomedTask) => {\n\t\tfetch(url + '/' + doomedTask.id, {\n\t\t\tmethod: 'DELETE',\n\t\t}).then(() => {\n\t\t\tconst filteredTasks = taskList.filter(\n\t\t\t\t(task) => task.id !== doomedTask.id\n\t\t\t);\n\t\t\tsetTaskList(filteredTasks);\n\t\t});\n\t\tconsole.log(doomedTask);\n\t};\n\n\tconst renderedTasks = taskList.map((task) => {\n\t\treturn (\n\t\t\t<TaskCard\n\t\t\t\thandleComplete={handleComplete}\n\t\t\t\tcomplete={complete}\n\t\t\t\ttask={task}\n\t\t\t\tkey={task.id}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"task-container\">\n\t\t\t{renderedTasks}\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"What do you need to do?\"\n\t\t\t\t\tname=\"task_item\"\n\t\t\t\t\tonChange={handleFormInput}\n\t\t\t\t\trequired\n\t\t\t\t></input>\n\t\t\t\t<button>Submit</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default TaskContainer;\n"]},"metadata":{},"sourceType":"module"}